{"version":3,"file":"919.index.js","mappings":";;;;;;;;;;AACA,0DAA4D;AAC5D,+CAA8D;AAC9D,2CAAmE;AACnE,yDAAiG;AACjG,6DAAwG;AACxG,4CAAsC;AAEtC,kBAAe,KAAK,EAAE,GAAG,IAAgB,EAAgB,EAAE;;IACzD,MAAM,EAAE,OAAO,EAAE,GAAG,yCAAkB,CAAC,GAAG,IAAI,CAAC,CAAC;IAEhD,sFAAsF;IACtF,qCAAqC;IACrC,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,EAAE;QACvB,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC;KAChC;IAED,iDAAiD;IACjD,8BAA8B;IAC9B,MAAM,WAAW,SAAG,OAAO,CAAC,GAAG,mCAAI,gBAAM,CAAC,GAAG,CAAC;IAC9C,MAAM,cAAc,GAAG,MAAM,wCAAiB,CAAC,WAAW,CAAC,CAAC;IAC5D,IAAI,QAAC,cAAc,CAAC,YAAY,0CAAE,QAAQ,GAAE;QAC1C,MAAM,IAAI,4DAAkC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;KACnE;IAED,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,mBAAW,CAAC;YACjC,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,EAAE;SAC1C,CAAC,CAAC;QACH,IAAI,QAAQ,CAAC,IAAI,KAAK,uBAAe,CAAC,UAAU,EAAE;YAChD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,2CAA2C;QAC3C,qEAAqE;QACrE,MAAM,SAAS,GAAG,MAAM,mBAAW,CAAC;YAClC,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE;YACpC,KAAK,EAAE,QAAQ,CAAC,MAAM;SACvB,CAAC,CAAC;QACH,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC7B;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAC,CAAC,CAAC;QAC3D,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC5B;AACH,CAAC,CAAC","sources":["webpack://snyk/./src/cli/commands/describe.ts"],"sourcesContent":["import { MethodArgs } from '../args';\nimport { processCommandArgs } from './process-command-args';\nimport * as legacyError from '../../lib/errors/legacy-errors';\nimport { DCTL_EXIT_CODES, runDriftCTL } from '../../lib/iac/drift';\nimport { getIacOrgSettings } from './test/iac-local-execution/org-settings/get-iac-org-settings';\nimport { UnsupportedEntitlementCommandError } from './test/iac-local-execution/assert-iac-options-flag';\nimport config from '../../lib/config';\n\nexport default async (...args: MethodArgs): Promise<any> => {\n  const { options } = processCommandArgs(...args);\n\n  // Ensure that this describe command can only be runned when using `snyk iac describe`\n  // Avoid `snyk describe` direct usage\n  if (options.iac != true) {\n    return legacyError('describe');\n  }\n\n  // Ensure that we are allowed to run that command\n  // by checking the entitlement\n  const orgPublicId = options.org ?? config.org;\n  const iacOrgSettings = await getIacOrgSettings(orgPublicId);\n  if (!iacOrgSettings.entitlements?.iacDrift) {\n    throw new UnsupportedEntitlementCommandError('drift', 'iacDrift');\n  }\n\n  try {\n    const describe = await runDriftCTL({\n      options: { kind: 'describe', ...options },\n    });\n    if (describe.code === DCTL_EXIT_CODES.EXIT_ERROR) {\n      process.exit(describe.code);\n    }\n    // TODO handle drift related analytics here\n    //const driftctlAnalysis = parseDriftAnalysisResults(describe.stdout)\n    const fmtResult = await runDriftCTL({\n      options: { kind: 'fmt', ...options },\n      input: describe.stdout,\n    });\n    process.stdout.write(fmtResult.stdout);\n    process.exit(describe.code);\n  } catch (e) {\n    const err = new Error('Error running `iac describe` ' + e);\n    return Promise.reject(err);\n  }\n};\n"],"names":[],"sourceRoot":""}